# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bR4MDrg1FSun9cmW4Vs2HZDeOmMLslel
"""

from google.colab import files

uploaded = files.upload()

import pandas as pd

# Load the CSV file into a DataFrame with explicit encoding
df = pd.read_csv("test.csv", encoding="ISO-8859-1")

# Display the DataFrame
df

# Display the first 5 rows of the DataFrame
df.head()

import nltk
nltk.download('vader_lexicon')

import nltk
nltk.download('vader_lexicon')

from nltk.sentiment import SentimentIntensityAnalyzer
import pandas as pd

# Load the CSV file into a DataFrame with explicit encoding
df = pd.read_csv("test.csv", encoding="ISO-8859-1")

# Handle missing values in the 'text' column
df['text'] = df['text'].fillna("")

# Initialize the VADER sentiment analyzer
sia = SentimentIntensityAnalyzer()

# Apply VADER sentiment analysis on the 'text' column
df['vader_sentiment'] = df['text'].apply(lambda x: sia.polarity_scores(str(x))['compound'])

# Display the DataFrame with VADER sentiment scores
df[['text', 'vader_sentiment']]

from textblob import TextBlob

# Apply TextBlob sentiment analysis on the 'text' column
df['textblob_sentiment'] = df['text'].apply(lambda x: TextBlob(x).sentiment.polarity)

# Display the DataFrame with TextBlob sentiment scores
df[['text', 'textblob_sentiment']]

import spacy

# Load spaCy model
nlp = spacy.load("en_core_web_sm")

# Define a function to get sentiment scores using spaCy
def get_spacy_sentiment(text):
    doc = nlp(text)
    return doc.sentiment

# Apply spaCy sentiment analysis on the 'text' column
df['spacy_sentiment'] = df['text'].apply(get_spacy_sentiment)

# Display the DataFrame with spaCy sentiment scores
df[['text', 'spacy_sentiment']]

import nltk
from nltk.sentiment import SentimentIntensityAnalyzer
from textblob import TextBlob
import spacy
import pandas as pd

# Download NLTK resources
nltk.download('vader_lexicon')

# Load spaCy model
nlp = spacy.load("en_core_web_sm")

# Load the CSV file into a DataFrame with explicit encoding
df = pd.read_csv("test.csv", encoding="ISO-8859-1")

# Handle missing values in the 'text' column
df['text'] = df['text'].fillna("")

# Initialize the VADER sentiment analyzer
sia = SentimentIntensityAnalyzer()

# Apply VADER sentiment analysis on the 'text' column
df['vader_sentiment'] = df['text'].apply(lambda x: sia.polarity_scores(str(x))['compound'])

# Apply TextBlob sentiment analysis on the 'text' column
df['textblob_sentiment'] = df['text'].apply(lambda x: TextBlob(str(x)).sentiment.polarity)

# Define a function to get sentiment scores using spaCy
def get_spacy_sentiment(text):
    doc = nlp(text)
    return doc.sentiment

# Apply spaCy sentiment analysis on the 'text' column
df['spacy_sentiment'] = df['text'].apply(lambda x: get_spacy_sentiment(str(x)))

# Assign labels based on sentiment scores
def label_sentiment(score):
    if score > 0:
        return 'Positive'
    elif score < 0:
        return 'Negative'
    else:
        return 'Neutral'

# Assign sentiment labels for each method
df['vader_sentiment_label'] = df['vader_sentiment'].apply(label_sentiment)
df['textblob_sentiment_label'] = df['textblob_sentiment'].apply(label_sentiment)
df['spacy_sentiment_label'] = df['spacy_sentiment'].apply(lambda x: label_sentiment(x['compound'] if isinstance(x, dict) else x))

# Display the DataFrames with sentiment scores and labels
vader_df = df[['text', 'vader_sentiment', 'vader_sentiment_label']]
textblob_df = df[['text', 'textblob_sentiment', 'textblob_sentiment_label']]
spacy_df = df[['text', 'spacy_sentiment', 'spacy_sentiment_label']]

# Save the DataFrames to CSV files
vader_df.to_csv('vader_sentiment_results.csv', index=False)
textblob_df.to_csv('textblob_sentiment_results.csv', index=False)
spacy_df.to_csv('spacy_sentiment_results.csv', index=False)

import matplotlib.pyplot as plt
import seaborn as sns

# Load the CSV files with sentiment results
vader_df = pd.read_csv('vader_sentiment_results.csv')
textblob_df = pd.read_csv('textblob_sentiment_results.csv')
spacy_df = pd.read_csv('spacy_sentiment_results.csv')

# Set up a common color palette for consistency in visualizations
palette = sns.color_palette("pastel")

# Function to plot sentiment distribution
def plot_sentiment_distribution(df, method_name):
    plt.figure(figsize=(8, 6))
    sns.countplot(x='{}_sentiment_label'.format(method_name.lower()), data=df, palette=palette)
    plt.title('Sentiment Distribution - {}'.format(method_name))
    plt.xlabel('Sentiment Label')
    plt.ylabel('Count')
    plt.savefig('{}_sentiment_distribution.png'.format(method_name.lower()))
    plt.show()

# Plot sentiment distributions for each method
plot_sentiment_distribution(vader_df, 'VADER')
plot_sentiment_distribution(textblob_df, 'TextBlob')
plot_sentiment_distribution(spacy_df, 'spaCy')